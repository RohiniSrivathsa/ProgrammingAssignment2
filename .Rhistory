q()
install.packages("swirl")
library("swirl")
swirl()
swirl()
install.packages("swirl")
library(swirl)
packageVersion("swirl")
library(swirl)
install_from_swirl("R Programming")
install.packages("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
c(1,2,3,4) + c(0,10,1000)
z*2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
dir()
list.files()
info()
?list.files
args(list.files)
old.dir <- getwd()
getwd()
cd CourseraR
chdir("CourseraR")
setwd("C:/Users/Rohini/OneDrive/Documents/CourseraR")
old.dir <- getwd()
dir.create("testdir")
setwd(testdir)
setwd("testdir")
?file.create
file.create("mytest.R")
dir()
file.exists("mytest.R")
file.info("mytest.R")
?file.rename
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
?file.path
file.path(folder1,folder2)
file.path("folder1","folder2")
?dir.create
getwd()
dir.create("testdir2",filepath("testdir2","testdir3"))
dir.create("testdir2",file.path("testdir2","testdir3"))
dir.create(file.path("testdir2","testdir3"), recursive = T)
info(dir.create())
info(dir.create)
?dir.create
dir.create("testdir2")
dir.create(file.path('testdir2','testdir3'), recursive = T)
list()
info()
play()
ls()
getwd()
dir.create('testdir2')
dir.create(file.path('testdir2','testdir3'), recursive = T)
nxt()
skip()
unlink('testdir2', recursive = T)
unlink("testdir2", recursive = T)
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Rohini")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c(1:3),c("X","Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my.na(is.na(my_data))
my.na <- is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
1/0
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
myvector<- 1:20
myvector<- c(1:20)
my_vector<- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix,my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
?colnames
colnames(my_data) <- cnames
my_data
q()
swirl()
load.packages("swirl")
install.packages("swirl")
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.date()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("My first function!")
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
play()
?stdev
?mean
nxt()
evaluate(sd,c(1.4,3.6, 7.9, 8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]}, x = c(8,4,0))
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun")
paste("Programming", "is", "fun!")
submit()
telegram("this","is","a","test")
submit()
submit()
submit()
mad_libs(a,b,c)
mad_libs("a","b","c")
submit()
submit()
submit()
'Hello' %p% 'student'
submit()
'Hello' %p% 'student'
'I' %p% 'love' %p% 'R!'
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d1)
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
?strptime
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
q()
install.packages("swirl")
library(swirl)
install_from_swirl("R Programming")
q()
install.packages("swirl")
library(swirl)
swirl()
install.packages("swirl")
library(swirl)
install_course_zip("C:\Users\Rohini\Downloads\swirl_courses-master.zip", multi=TRUE, which_course="R Programming")
install_course_zip("C:\Users\Rohini\Downloads\swirl_courses-master.zip", multi=TRUE, which_course="R Programming")
install_course_zip("C:/Users/Rohini/Downloads/swirl_courses-master.zip", multi=TRUE, which_course="R Programming")
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1)
)
ok()
sapply(flags, class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red, summary)
tapply(flags$population,flags$landmass, summary)
library(datasets)
data(iris)
?data
?iris
tapply(iris,iris$Sepal.Length,iris$Species,mean)
tapply(iris$Sepal.Length,iris$Species,mean)
summary(iris)
head(iris)
library(datasets)
data(mtcars)
?mtcars
head(mtcars)
tapply(mtcars$mpg,mtcars$cyl,mean)
tapply(mtcars$hp,mtcars$cyl,mean)
209.21429-82.63636
debug(ls)
ls
ls()
q()
pwd
ls()
dir()
setwd("~/R/Assignment2/ProgrammingAssignment2")
ls()
dir()
?solve
?solve.default
x <- [1 2; 3 4]
x <- c(1:6, 2, 3)
x
x <- matrix(c(1:4, nrow = 2, ncol = 2)
)
x
x <- matrix(c(1:4), nrow = 2, ncol = 2)
x
solve(x)
source("cachematrix.R")
cacheSolve(x)
a <- makeCacheMatrix(x)
z
a
cacheSolve(a)
cacheSolve(x)
?identical
a
x
a
a$getSolve()
x
y <- matrix(c(4:7), nrow = 2, ncol = 2)
y
b <- makeCacheMatrix(y)
b$getSolve()
cacheSolve(b)
b$getSolve()
source("cachematrix.R")
View(x)
?clear
X
a <- makeCacheMatrix(x)
cacheSolve(y)
cacheSolve(a)
source("cachematrix.R")
T <- matrix(c(9:12), nrow = 4, ncol = 4)
T
T1 <- makeCacheMatrix(T)
T1$getSolve()
T1$get()
T1$set()
q()
